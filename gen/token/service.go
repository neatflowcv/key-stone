// Code generated by goa v3.22.3, DO NOT EDIT.
//
// token service
//
// Command:
// $ goa gen github.com/neatflowcv/key-stone/design

package token

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Service is the token service interface.
type Service interface {
	// Issue implements issue.
	Issue(context.Context, *IssuePayload) (res *TokenDetail, err error)
	// Refresh implements refresh.
	Refresh(context.Context, *RefreshPayload) (res *TokenDetail, err error)
}

// APIName is the name of the API as defined in the design.
const APIName = "key-stone"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "v0.0.1"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "token"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [2]string{"issue", "refresh"}

type IssueInput struct {
	// The username of the user
	Username string
	// The password of the user
	Password string
}

// IssuePayload is the payload type of the token service issue method.
type IssuePayload struct {
	User *IssueInput
}

type RefreshInput struct {
	// The access token of the user
	AccessToken string
	// The refresh token of the user
	RefreshToken string
}

// RefreshPayload is the payload type of the token service refresh method.
type RefreshPayload struct {
	Token *RefreshInput
}

// TokenDetail is the result type of the token service issue method.
type TokenDetail struct {
	// The access token of the user
	AccessToken *string
	// The token type of the user
	TokenType *string
	// The expires in of the user
	ExpiresIn *int
	// The refresh token of the user
	RefreshToken *string
}

// MakeBadRequest builds a goa.ServiceError from an error.
func MakeBadRequest(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "BadRequest", false, false, false)
}

// MakeUnauthorized builds a goa.ServiceError from an error.
func MakeUnauthorized(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "Unauthorized", false, false, false)
}
