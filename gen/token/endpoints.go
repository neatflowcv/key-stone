// Code generated by goa v3.22.3, DO NOT EDIT.
//
// token endpoints
//
// Command:
// $ goa gen github.com/neatflowcv/key-stone/design

package token

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "token" service endpoints.
type Endpoints struct {
	Issue   goa.Endpoint
	Refresh goa.Endpoint
}

// NewEndpoints wraps the methods of the "token" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		Issue:   NewIssueEndpoint(s),
		Refresh: NewRefreshEndpoint(s),
	}
}

// Use applies the given middleware to all the "token" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Issue = m(e.Issue)
	e.Refresh = m(e.Refresh)
}

// NewIssueEndpoint returns an endpoint function that calls the method "issue"
// of service "token".
func NewIssueEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*IssuePayload)
		return s.Issue(ctx, p)
	}
}

// NewRefreshEndpoint returns an endpoint function that calls the method
// "refresh" of service "token".
func NewRefreshEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*RefreshPayload)
		return s.Refresh(ctx, p)
	}
}
