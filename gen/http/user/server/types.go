// Code generated by goa v3.22.2, DO NOT EDIT.
//
// user HTTP server types
//
// Command:
// $ goa gen github.com/neatflowcv/key-stone/design

package server

import (
	user "github.com/neatflowcv/key-stone/gen/user"
	goa "goa.design/goa/v3/pkg"
)

// CreateRequestBody is the type of the "user" service "create" endpoint HTTP
// request body.
type CreateRequestBody struct {
	User *UserInputRequestBody `form:"user,omitempty" json:"user,omitempty" xml:"user,omitempty"`
}

// UserInputRequestBody is used to define fields on request body types.
type UserInputRequestBody struct {
	// The name of the user
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// The password of the user
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
	// The payload of the user
	Payload map[string]any `form:"payload,omitempty" json:"payload,omitempty" xml:"payload,omitempty"`
}

// NewCreatePayload builds a user service create endpoint payload.
func NewCreatePayload(body *CreateRequestBody) *user.CreatePayload {
	v := &user.CreatePayload{}
	if body.User != nil {
		v.User = unmarshalUserInputRequestBodyToUserUserInput(body.User)
	}

	return v
}

// NewDeleteUserPayload builds a user service delete endpoint payload.
func NewDeleteUserPayload(authorization string) *user.DeleteUserPayload {
	v := &user.DeleteUserPayload{}
	v.Authorization = authorization

	return v
}

// ValidateCreateRequestBody runs the validations defined on CreateRequestBody
func ValidateCreateRequestBody(body *CreateRequestBody) (err error) {
	if body.User != nil {
		if err2 := ValidateUserInputRequestBody(body.User); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateUserInputRequestBody runs the validations defined on
// UserInputRequestBody
func ValidateUserInputRequestBody(body *UserInputRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Password == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("password", "body"))
	}
	return
}
