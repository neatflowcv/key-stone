// Code generated by goa v3.22.5, DO NOT EDIT.
//
// user HTTP server types
//
// Command:
// $ goa gen github.com/neatflowcv/key-stone/design

package server

import (
	user "github.com/neatflowcv/key-stone/gen/user"
	goa "goa.design/goa/v3/pkg"
)

// CreateRequestBody is the type of the "user" service "create" endpoint HTTP
// request body.
type CreateRequestBody struct {
	User *UserInputRequestBody `form:"user,omitempty" json:"user,omitempty" xml:"user,omitempty"`
}

// DeleteUnauthorizedResponseBody is the type of the "user" service "delete"
// endpoint HTTP response body for the "Unauthorized" error.
type DeleteUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UserInputRequestBody is used to define fields on request body types.
type UserInputRequestBody struct {
	// The name of the user
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// The password of the user
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
}

// NewDeleteUnauthorizedResponseBody builds the HTTP response body from the
// result of the "delete" endpoint of the "user" service.
func NewDeleteUnauthorizedResponseBody(res *goa.ServiceError) *DeleteUnauthorizedResponseBody {
	body := &DeleteUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreatePayload builds a user service create endpoint payload.
func NewCreatePayload(body *CreateRequestBody) *user.CreatePayload {
	v := &user.CreatePayload{}
	v.User = unmarshalUserInputRequestBodyToUserUserInput(body.User)

	return v
}

// NewDeleteUserPayload builds a user service delete endpoint payload.
func NewDeleteUserPayload(authorization string) *user.DeleteUserPayload {
	v := &user.DeleteUserPayload{}
	v.Authorization = authorization

	return v
}

// ValidateCreateRequestBody runs the validations defined on CreateRequestBody
func ValidateCreateRequestBody(body *CreateRequestBody) (err error) {
	if body.User == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("user", "body"))
	}
	if body.User != nil {
		if err2 := ValidateUserInputRequestBody(body.User); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateUserInputRequestBody runs the validations defined on
// UserInputRequestBody
func ValidateUserInputRequestBody(body *UserInputRequestBody) (err error) {
	if body.Username == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("username", "body"))
	}
	if body.Password == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("password", "body"))
	}
	return
}
