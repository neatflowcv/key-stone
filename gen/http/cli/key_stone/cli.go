// Code generated by goa v3.22.3, DO NOT EDIT.
//
// key-stone HTTP client CLI support package
//
// Command:
// $ goa gen github.com/neatflowcv/key-stone/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	tokenc "github.com/neatflowcv/key-stone/gen/http/token/client"
	userc "github.com/neatflowcv/key-stone/gen/http/user/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() []string {
	return []string{
		"user (create|delete)",
		"token (issue|refresh)",
	}
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` user create --body '{
      "user": {
         "password": "Occaecati vel adipisci.",
         "username": "Quia architecto veritatis deleniti ea perferendis."
      }
   }'` + "\n" +
		os.Args[0] + ` token issue --body '{
      "user": {
         "password": "Sapiente temporibus vel.",
         "username": "Dolores fuga asperiores voluptatem aspernatur eum."
      }
   }'` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, any, error) {
	var (
		userFlags = flag.NewFlagSet("user", flag.ContinueOnError)

		userCreateFlags    = flag.NewFlagSet("create", flag.ExitOnError)
		userCreateBodyFlag = userCreateFlags.String("body", "REQUIRED", "")

		userDeleteFlags             = flag.NewFlagSet("delete", flag.ExitOnError)
		userDeleteAuthorizationFlag = userDeleteFlags.String("authorization", "REQUIRED", "")

		tokenFlags = flag.NewFlagSet("token", flag.ContinueOnError)

		tokenIssueFlags    = flag.NewFlagSet("issue", flag.ExitOnError)
		tokenIssueBodyFlag = tokenIssueFlags.String("body", "REQUIRED", "")

		tokenRefreshFlags    = flag.NewFlagSet("refresh", flag.ExitOnError)
		tokenRefreshBodyFlag = tokenRefreshFlags.String("body", "REQUIRED", "")
	)
	userFlags.Usage = userUsage
	userCreateFlags.Usage = userCreateUsage
	userDeleteFlags.Usage = userDeleteUsage

	tokenFlags.Usage = tokenUsage
	tokenIssueFlags.Usage = tokenIssueUsage
	tokenRefreshFlags.Usage = tokenRefreshUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "user":
			svcf = userFlags
		case "token":
			svcf = tokenFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "user":
			switch epn {
			case "create":
				epf = userCreateFlags

			case "delete":
				epf = userDeleteFlags

			}

		case "token":
			switch epn {
			case "issue":
				epf = tokenIssueFlags

			case "refresh":
				epf = tokenRefreshFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "user":
			c := userc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "create":
				endpoint = c.Create()
				data, err = userc.BuildCreatePayload(*userCreateBodyFlag)
			case "delete":
				endpoint = c.Delete()
				data, err = userc.BuildDeletePayload(*userDeleteAuthorizationFlag)
			}
		case "token":
			c := tokenc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "issue":
				endpoint = c.Issue()
				data, err = tokenc.BuildIssuePayload(*tokenIssueBodyFlag)
			case "refresh":
				endpoint = c.Refresh()
				data, err = tokenc.BuildRefreshPayload(*tokenRefreshBodyFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// userUsage displays the usage of the user command and its subcommands.
func userUsage() {
	fmt.Fprintln(os.Stderr, `Service is the user service interface.`)
	fmt.Fprintf(os.Stderr, "Usage:\n    %s [globalflags] user COMMAND [flags]\n\n", os.Args[0])
	fmt.Fprintln(os.Stderr, "COMMAND:")
	fmt.Fprintln(os.Stderr, `    create: Create implements create.`)
	fmt.Fprintln(os.Stderr, `    delete: Delete implements delete.`)
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Additional help:")
	fmt.Fprintf(os.Stderr, "    %s user COMMAND --help\n", os.Args[0])
}
func userCreateUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] user create", os.Args[0])
	fmt.Fprint(os.Stderr, " -body JSON")
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `Create implements create.`)

	// Flags list
	fmt.Fprintln(os.Stderr, `    -body JSON: `)

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `user create --body '{
      "user": {
         "password": "Occaecati vel adipisci.",
         "username": "Quia architecto veritatis deleniti ea perferendis."
      }
   }'`)
}

func userDeleteUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] user delete", os.Args[0])
	fmt.Fprint(os.Stderr, " -authorization STRING")
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `Delete implements delete.`)

	// Flags list
	fmt.Fprintln(os.Stderr, `    -authorization STRING: `)

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `user delete --authorization "Qui fugit delectus voluptas explicabo."`)
}

// tokenUsage displays the usage of the token command and its subcommands.
func tokenUsage() {
	fmt.Fprintln(os.Stderr, `Service is the token service interface.`)
	fmt.Fprintf(os.Stderr, "Usage:\n    %s [globalflags] token COMMAND [flags]\n\n", os.Args[0])
	fmt.Fprintln(os.Stderr, "COMMAND:")
	fmt.Fprintln(os.Stderr, `    issue: Issue implements issue.`)
	fmt.Fprintln(os.Stderr, `    refresh: Refresh implements refresh.`)
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Additional help:")
	fmt.Fprintf(os.Stderr, "    %s token COMMAND --help\n", os.Args[0])
}
func tokenIssueUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] token issue", os.Args[0])
	fmt.Fprint(os.Stderr, " -body JSON")
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `Issue implements issue.`)

	// Flags list
	fmt.Fprintln(os.Stderr, `    -body JSON: `)

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `token issue --body '{
      "user": {
         "password": "Sapiente temporibus vel.",
         "username": "Dolores fuga asperiores voluptatem aspernatur eum."
      }
   }'`)
}

func tokenRefreshUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] token refresh", os.Args[0])
	fmt.Fprint(os.Stderr, " -body JSON")
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `Refresh implements refresh.`)

	// Flags list
	fmt.Fprintln(os.Stderr, `    -body JSON: `)

	// Example block: pass example as parameter to avoid format parsing of % characters
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], `token refresh --body '{
      "token": {
         "access_token": "Sed alias qui mollitia ab delectus a.",
         "refresh_token": "Ducimus laboriosam exercitationem eos."
      }
   }'`)
}
