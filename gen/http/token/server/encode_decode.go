// Code generated by goa v3.22.5, DO NOT EDIT.
//
// token HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/neatflowcv/key-stone/design

package server

import (
	"context"
	"errors"
	"io"
	"net/http"

	token "github.com/neatflowcv/key-stone/gen/token"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeIssueResponse returns an encoder for responses returned by the token
// issue endpoint.
func EncodeIssueResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*token.TokenDetail)
		enc := encoder(ctx, w)
		body := NewIssueResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeIssueRequest returns a decoder for requests sent to the token issue
// endpoint.
func DecodeIssueRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (*token.IssuePayload, error) {
	return func(r *http.Request) (*token.IssuePayload, error) {
		var (
			body IssueRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if errors.Is(err, io.EOF) {
				return nil, goa.MissingPayloadError()
			}
			var gerr *goa.ServiceError
			if errors.As(err, &gerr) {
				return nil, gerr
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateIssueRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewIssuePayload(&body)

		return payload, nil
	}
}

// EncodeIssueError returns an encoder for errors returned by the issue token
// endpoint.
func EncodeIssueError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "Unauthorized":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewIssueUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeRefreshResponse returns an encoder for responses returned by the token
// refresh endpoint.
func EncodeRefreshResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*token.TokenDetail)
		enc := encoder(ctx, w)
		body := NewRefreshResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeRefreshRequest returns a decoder for requests sent to the token
// refresh endpoint.
func DecodeRefreshRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (*token.RefreshPayload, error) {
	return func(r *http.Request) (*token.RefreshPayload, error) {
		var (
			body RefreshRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if errors.Is(err, io.EOF) {
				return nil, goa.MissingPayloadError()
			}
			var gerr *goa.ServiceError
			if errors.As(err, &gerr) {
				return nil, gerr
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateRefreshRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewRefreshPayload(&body)

		return payload, nil
	}
}

// EncodeRefreshError returns an encoder for errors returned by the refresh
// token endpoint.
func EncodeRefreshError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "Unauthorized":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewRefreshUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		case "InternalServerError":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewRefreshInternalServerErrorResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// unmarshalIssueInputRequestBodyToTokenIssueInput builds a value of type
// *token.IssueInput from a value of type *IssueInputRequestBody.
func unmarshalIssueInputRequestBodyToTokenIssueInput(v *IssueInputRequestBody) *token.IssueInput {
	res := &token.IssueInput{
		Username: *v.Username,
		Password: *v.Password,
	}

	return res
}

// unmarshalRefreshInputRequestBodyToTokenRefreshInput builds a value of type
// *token.RefreshInput from a value of type *RefreshInputRequestBody.
func unmarshalRefreshInputRequestBodyToTokenRefreshInput(v *RefreshInputRequestBody) *token.RefreshInput {
	res := &token.RefreshInput{
		AccessToken:  *v.AccessToken,
		RefreshToken: *v.RefreshToken,
	}

	return res
}
