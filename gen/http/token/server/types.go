// Code generated by goa v3.22.2, DO NOT EDIT.
//
// token HTTP server types
//
// Command:
// $ goa gen github.com/neatflowcv/key-stone/design

package server

import (
	token "github.com/neatflowcv/key-stone/gen/token"
	goa "goa.design/goa/v3/pkg"
)

// IssueRequestBody is the type of the "token" service "issue" endpoint HTTP
// request body.
type IssueRequestBody struct {
	User *IssueInputRequestBody `form:"user,omitempty" json:"user,omitempty" xml:"user,omitempty"`
}

// RefreshRequestBody is the type of the "token" service "refresh" endpoint
// HTTP request body.
type RefreshRequestBody struct {
	Token *RefreshInputRequestBody `form:"token,omitempty" json:"token,omitempty" xml:"token,omitempty"`
}

// IssueResponseBody is the type of the "token" service "issue" endpoint HTTP
// response body.
type IssueResponseBody struct {
	// The access token of the user
	AccessToken *string `form:"access_token,omitempty" json:"access_token,omitempty" xml:"access_token,omitempty"`
	// The token type of the user
	TokenType *string `form:"token_type,omitempty" json:"token_type,omitempty" xml:"token_type,omitempty"`
	// The expires in of the user
	ExpiresIn *int `form:"expires_in,omitempty" json:"expires_in,omitempty" xml:"expires_in,omitempty"`
	// The refresh token of the user
	RefreshToken *string `form:"refresh_token,omitempty" json:"refresh_token,omitempty" xml:"refresh_token,omitempty"`
}

// RefreshResponseBody is the type of the "token" service "refresh" endpoint
// HTTP response body.
type RefreshResponseBody struct {
	// The access token of the user
	AccessToken *string `form:"access_token,omitempty" json:"access_token,omitempty" xml:"access_token,omitempty"`
	// The token type of the user
	TokenType *string `form:"token_type,omitempty" json:"token_type,omitempty" xml:"token_type,omitempty"`
	// The expires in of the user
	ExpiresIn *int `form:"expires_in,omitempty" json:"expires_in,omitempty" xml:"expires_in,omitempty"`
	// The refresh token of the user
	RefreshToken *string `form:"refresh_token,omitempty" json:"refresh_token,omitempty" xml:"refresh_token,omitempty"`
}

// IssueInputRequestBody is used to define fields on request body types.
type IssueInputRequestBody struct {
	// The username of the user
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// The password of the user
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
}

// RefreshInputRequestBody is used to define fields on request body types.
type RefreshInputRequestBody struct {
	// The access token of the user
	AccessToken *string `form:"access_token,omitempty" json:"access_token,omitempty" xml:"access_token,omitempty"`
	// The refresh token of the user
	RefreshToken *string `form:"refresh_token,omitempty" json:"refresh_token,omitempty" xml:"refresh_token,omitempty"`
}

// NewIssueResponseBody builds the HTTP response body from the result of the
// "issue" endpoint of the "token" service.
func NewIssueResponseBody(res *token.TokenDetail) *IssueResponseBody {
	body := &IssueResponseBody{
		AccessToken:  res.AccessToken,
		TokenType:    res.TokenType,
		ExpiresIn:    res.ExpiresIn,
		RefreshToken: res.RefreshToken,
	}
	return body
}

// NewRefreshResponseBody builds the HTTP response body from the result of the
// "refresh" endpoint of the "token" service.
func NewRefreshResponseBody(res *token.TokenDetail) *RefreshResponseBody {
	body := &RefreshResponseBody{
		AccessToken:  res.AccessToken,
		TokenType:    res.TokenType,
		ExpiresIn:    res.ExpiresIn,
		RefreshToken: res.RefreshToken,
	}
	return body
}

// NewIssuePayload builds a token service issue endpoint payload.
func NewIssuePayload(body *IssueRequestBody) *token.IssuePayload {
	v := &token.IssuePayload{}
	if body.User != nil {
		v.User = unmarshalIssueInputRequestBodyToTokenIssueInput(body.User)
	}

	return v
}

// NewRefreshPayload builds a token service refresh endpoint payload.
func NewRefreshPayload(body *RefreshRequestBody) *token.RefreshPayload {
	v := &token.RefreshPayload{}
	if body.Token != nil {
		v.Token = unmarshalRefreshInputRequestBodyToTokenRefreshInput(body.Token)
	}

	return v
}

// ValidateIssueRequestBody runs the validations defined on IssueRequestBody
func ValidateIssueRequestBody(body *IssueRequestBody) (err error) {
	if body.User != nil {
		if err2 := ValidateIssueInputRequestBody(body.User); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateRefreshRequestBody runs the validations defined on RefreshRequestBody
func ValidateRefreshRequestBody(body *RefreshRequestBody) (err error) {
	if body.Token != nil {
		if err2 := ValidateRefreshInputRequestBody(body.Token); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateIssueInputRequestBody runs the validations defined on
// IssueInputRequestBody
func ValidateIssueInputRequestBody(body *IssueInputRequestBody) (err error) {
	if body.Username == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("username", "body"))
	}
	if body.Password == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("password", "body"))
	}
	return
}

// ValidateRefreshInputRequestBody runs the validations defined on
// RefreshInputRequestBody
func ValidateRefreshInputRequestBody(body *RefreshInputRequestBody) (err error) {
	if body.AccessToken == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("access_token", "body"))
	}
	if body.RefreshToken == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("refresh_token", "body"))
	}
	return
}
