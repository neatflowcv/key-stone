// Code generated by goa v3.22.5, DO NOT EDIT.
//
// token HTTP server types
//
// Command:
// $ goa gen github.com/neatflowcv/key-stone/design

package server

import (
	token "github.com/neatflowcv/key-stone/gen/token"
	goa "goa.design/goa/v3/pkg"
)

// IssueRequestBody is the type of the "token" service "issue" endpoint HTTP
// request body.
type IssueRequestBody struct {
	// The username of the user
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// The password of the user
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
}

// RefreshRequestBody is the type of the "token" service "refresh" endpoint
// HTTP request body.
type RefreshRequestBody struct {
	// The access token of the user
	AccessToken *string `form:"access_token,omitempty" json:"access_token,omitempty" xml:"access_token,omitempty"`
	// The refresh token of the user
	RefreshToken *string `form:"refresh_token,omitempty" json:"refresh_token,omitempty" xml:"refresh_token,omitempty"`
}

// IssueResponseBody is the type of the "token" service "issue" endpoint HTTP
// response body.
type IssueResponseBody struct {
	// The access token of the user
	AccessToken string `form:"access_token" json:"access_token" xml:"access_token"`
	// The token type of the user
	TokenType string `form:"token_type" json:"token_type" xml:"token_type"`
	// The expires in of the user
	ExpiresIn int `form:"expires_in" json:"expires_in" xml:"expires_in"`
	// The refresh token of the user
	RefreshToken string `form:"refresh_token" json:"refresh_token" xml:"refresh_token"`
}

// RefreshResponseBody is the type of the "token" service "refresh" endpoint
// HTTP response body.
type RefreshResponseBody struct {
	// The access token of the user
	AccessToken string `form:"access_token" json:"access_token" xml:"access_token"`
	// The token type of the user
	TokenType string `form:"token_type" json:"token_type" xml:"token_type"`
	// The expires in of the user
	ExpiresIn int `form:"expires_in" json:"expires_in" xml:"expires_in"`
	// The refresh token of the user
	RefreshToken string `form:"refresh_token" json:"refresh_token" xml:"refresh_token"`
}

// IssueUnauthorizedResponseBody is the type of the "token" service "issue"
// endpoint HTTP response body for the "Unauthorized" error.
type IssueUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RefreshUnauthorizedResponseBody is the type of the "token" service "refresh"
// endpoint HTTP response body for the "Unauthorized" error.
type RefreshUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RefreshInternalServerErrorResponseBody is the type of the "token" service
// "refresh" endpoint HTTP response body for the "InternalServerError" error.
type RefreshInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// NewIssueResponseBody builds the HTTP response body from the result of the
// "issue" endpoint of the "token" service.
func NewIssueResponseBody(res *token.TokenDetail) *IssueResponseBody {
	body := &IssueResponseBody{
		AccessToken:  res.AccessToken,
		TokenType:    res.TokenType,
		ExpiresIn:    res.ExpiresIn,
		RefreshToken: res.RefreshToken,
	}
	return body
}

// NewRefreshResponseBody builds the HTTP response body from the result of the
// "refresh" endpoint of the "token" service.
func NewRefreshResponseBody(res *token.TokenDetail) *RefreshResponseBody {
	body := &RefreshResponseBody{
		AccessToken:  res.AccessToken,
		TokenType:    res.TokenType,
		ExpiresIn:    res.ExpiresIn,
		RefreshToken: res.RefreshToken,
	}
	return body
}

// NewIssueUnauthorizedResponseBody builds the HTTP response body from the
// result of the "issue" endpoint of the "token" service.
func NewIssueUnauthorizedResponseBody(res *goa.ServiceError) *IssueUnauthorizedResponseBody {
	body := &IssueUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRefreshUnauthorizedResponseBody builds the HTTP response body from the
// result of the "refresh" endpoint of the "token" service.
func NewRefreshUnauthorizedResponseBody(res *goa.ServiceError) *RefreshUnauthorizedResponseBody {
	body := &RefreshUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRefreshInternalServerErrorResponseBody builds the HTTP response body from
// the result of the "refresh" endpoint of the "token" service.
func NewRefreshInternalServerErrorResponseBody(res *goa.ServiceError) *RefreshInternalServerErrorResponseBody {
	body := &RefreshInternalServerErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewIssueInput builds a token service issue endpoint payload.
func NewIssueInput(body *IssueRequestBody) *token.IssueInput {
	v := &token.IssueInput{
		Username: *body.Username,
		Password: *body.Password,
	}

	return v
}

// NewRefreshInput builds a token service refresh endpoint payload.
func NewRefreshInput(body *RefreshRequestBody) *token.RefreshInput {
	v := &token.RefreshInput{
		AccessToken:  *body.AccessToken,
		RefreshToken: *body.RefreshToken,
	}

	return v
}

// ValidateIssueRequestBody runs the validations defined on IssueRequestBody
func ValidateIssueRequestBody(body *IssueRequestBody) (err error) {
	if body.Username == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("username", "body"))
	}
	if body.Password == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("password", "body"))
	}
	return
}

// ValidateRefreshRequestBody runs the validations defined on RefreshRequestBody
func ValidateRefreshRequestBody(body *RefreshRequestBody) (err error) {
	if body.AccessToken == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("access_token", "body"))
	}
	if body.RefreshToken == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("refresh_token", "body"))
	}
	return
}
