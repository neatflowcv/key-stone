// Code generated by goa v3.22.3, DO NOT EDIT.
//
// token HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/neatflowcv/key-stone/design

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	token "github.com/neatflowcv/key-stone/gen/token"
	goahttp "goa.design/goa/v3/http"
)

// BuildIssueRequest instantiates a HTTP request object with method and path
// set to call the "token" service "issue" endpoint
func (c *Client) BuildIssueRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: IssueTokenPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("token", "issue", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeIssueRequest returns an encoder for requests sent to the token issue
// server.
func EncodeIssueRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*token.IssuePayload)
		if !ok {
			return goahttp.ErrInvalidType("token", "issue", "*token.IssuePayload", v)
		}
		body := NewIssueRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("token", "issue", err)
		}
		return nil
	}
}

// DecodeIssueResponse returns a decoder for responses returned by the token
// issue endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeIssueResponse may return the following errors:
//   - "BadRequest" (type *goa.ServiceError): http.StatusBadRequest
//   - "Unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - error: internal error
func DecodeIssueResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body IssueResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("token", "issue", err)
			}
			err = ValidateIssueResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("token", "issue", err)
			}
			res := NewIssueTokenDetailOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body IssueBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("token", "issue", err)
			}
			err = ValidateIssueBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("token", "issue", err)
			}
			return nil, NewIssueBadRequest(&body)
		case http.StatusUnauthorized:
			var (
				body IssueUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("token", "issue", err)
			}
			err = ValidateIssueUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("token", "issue", err)
			}
			return nil, NewIssueUnauthorized(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("token", "issue", resp.StatusCode, string(body))
		}
	}
}

// BuildRefreshRequest instantiates a HTTP request object with method and path
// set to call the "token" service "refresh" endpoint
func (c *Client) BuildRefreshRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: RefreshTokenPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("token", "refresh", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeRefreshRequest returns an encoder for requests sent to the token
// refresh server.
func EncodeRefreshRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*token.RefreshPayload)
		if !ok {
			return goahttp.ErrInvalidType("token", "refresh", "*token.RefreshPayload", v)
		}
		body := NewRefreshRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("token", "refresh", err)
		}
		return nil
	}
}

// DecodeRefreshResponse returns a decoder for responses returned by the token
// refresh endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeRefreshResponse may return the following errors:
//   - "BadRequest" (type *goa.ServiceError): http.StatusBadRequest
//   - "Unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - error: internal error
func DecodeRefreshResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body RefreshResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("token", "refresh", err)
			}
			err = ValidateRefreshResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("token", "refresh", err)
			}
			res := NewRefreshTokenDetailOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body RefreshBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("token", "refresh", err)
			}
			err = ValidateRefreshBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("token", "refresh", err)
			}
			return nil, NewRefreshBadRequest(&body)
		case http.StatusUnauthorized:
			var (
				body RefreshUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("token", "refresh", err)
			}
			err = ValidateRefreshUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("token", "refresh", err)
			}
			return nil, NewRefreshUnauthorized(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("token", "refresh", resp.StatusCode, string(body))
		}
	}
}

// marshalTokenIssueInputToIssueInputRequestBody builds a value of type
// *IssueInputRequestBody from a value of type *token.IssueInput.
func marshalTokenIssueInputToIssueInputRequestBody(v *token.IssueInput) *IssueInputRequestBody {
	res := &IssueInputRequestBody{
		Username: v.Username,
		Password: v.Password,
	}

	return res
}

// marshalIssueInputRequestBodyToTokenIssueInput builds a value of type
// *token.IssueInput from a value of type *IssueInputRequestBody.
func marshalIssueInputRequestBodyToTokenIssueInput(v *IssueInputRequestBody) *token.IssueInput {
	res := &token.IssueInput{
		Username: v.Username,
		Password: v.Password,
	}

	return res
}

// marshalTokenRefreshInputToRefreshInputRequestBody builds a value of type
// *RefreshInputRequestBody from a value of type *token.RefreshInput.
func marshalTokenRefreshInputToRefreshInputRequestBody(v *token.RefreshInput) *RefreshInputRequestBody {
	res := &RefreshInputRequestBody{
		AccessToken:  v.AccessToken,
		RefreshToken: v.RefreshToken,
	}

	return res
}

// marshalRefreshInputRequestBodyToTokenRefreshInput builds a value of type
// *token.RefreshInput from a value of type *RefreshInputRequestBody.
func marshalRefreshInputRequestBodyToTokenRefreshInput(v *RefreshInputRequestBody) *token.RefreshInput {
	res := &token.RefreshInput{
		AccessToken:  v.AccessToken,
		RefreshToken: v.RefreshToken,
	}

	return res
}
