// Code generated by goa v3.22.5, DO NOT EDIT.
//
// token HTTP client CLI support package
//
// Command:
// $ goa gen github.com/neatflowcv/key-stone/design

package client

import (
	"encoding/json"
	"fmt"

	token "github.com/neatflowcv/key-stone/gen/token"
)

// BuildIssuePayload builds the payload for the token issue endpoint from CLI
// flags.
func BuildIssuePayload(tokenIssueBody string) (*token.IssueInput, error) {
	var err error
	var body IssueRequestBody
	{
		err = json.Unmarshal([]byte(tokenIssueBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"password\": \"Illo et rerum quia odit voluptas.\",\n      \"username\": \"Esse sapiente temporibus vel.\"\n   }'")
		}
	}
	v := &token.IssueInput{
		Username: body.Username,
		Password: body.Password,
	}

	return v, nil
}

// BuildRefreshPayload builds the payload for the token refresh endpoint from
// CLI flags.
func BuildRefreshPayload(tokenRefreshBody string) (*token.RefreshInput, error) {
	var err error
	var body RefreshRequestBody
	{
		err = json.Unmarshal([]byte(tokenRefreshBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"access_token\": \"Laboriosam exercitationem.\",\n      \"refresh_token\": \"Voluptatem sit culpa.\"\n   }'")
		}
	}
	v := &token.RefreshInput{
		AccessToken:  body.AccessToken,
		RefreshToken: body.RefreshToken,
	}

	return v, nil
}
