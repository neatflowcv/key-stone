// Code generated by goa v3.22.5, DO NOT EDIT.
//
// token HTTP client types
//
// Command:
// $ goa gen github.com/neatflowcv/key-stone/design

package client

import (
	token "github.com/neatflowcv/key-stone/gen/token"
	goa "goa.design/goa/v3/pkg"
)

// IssueRequestBody is the type of the "token" service "issue" endpoint HTTP
// request body.
type IssueRequestBody struct {
	// The username of the user
	Username string `form:"username" json:"username" xml:"username"`
	// The password of the user
	Password string `form:"password" json:"password" xml:"password"`
}

// RefreshRequestBody is the type of the "token" service "refresh" endpoint
// HTTP request body.
type RefreshRequestBody struct {
	// The access token of the user
	AccessToken string `form:"access_token" json:"access_token" xml:"access_token"`
	// The refresh token of the user
	RefreshToken string `form:"refresh_token" json:"refresh_token" xml:"refresh_token"`
}

// IssueResponseBody is the type of the "token" service "issue" endpoint HTTP
// response body.
type IssueResponseBody struct {
	// The access token of the user
	AccessToken *string `form:"access_token,omitempty" json:"access_token,omitempty" xml:"access_token,omitempty"`
	// The token type of the user
	TokenType *string `form:"token_type,omitempty" json:"token_type,omitempty" xml:"token_type,omitempty"`
	// The expires in of the user
	ExpiresIn *int `form:"expires_in,omitempty" json:"expires_in,omitempty" xml:"expires_in,omitempty"`
	// The refresh token of the user
	RefreshToken *string `form:"refresh_token,omitempty" json:"refresh_token,omitempty" xml:"refresh_token,omitempty"`
}

// RefreshResponseBody is the type of the "token" service "refresh" endpoint
// HTTP response body.
type RefreshResponseBody struct {
	// The access token of the user
	AccessToken *string `form:"access_token,omitempty" json:"access_token,omitempty" xml:"access_token,omitempty"`
	// The token type of the user
	TokenType *string `form:"token_type,omitempty" json:"token_type,omitempty" xml:"token_type,omitempty"`
	// The expires in of the user
	ExpiresIn *int `form:"expires_in,omitempty" json:"expires_in,omitempty" xml:"expires_in,omitempty"`
	// The refresh token of the user
	RefreshToken *string `form:"refresh_token,omitempty" json:"refresh_token,omitempty" xml:"refresh_token,omitempty"`
}

// IssueUnauthorizedResponseBody is the type of the "token" service "issue"
// endpoint HTTP response body for the "Unauthorized" error.
type IssueUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// RefreshUnauthorizedResponseBody is the type of the "token" service "refresh"
// endpoint HTTP response body for the "Unauthorized" error.
type RefreshUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// RefreshInternalServerErrorResponseBody is the type of the "token" service
// "refresh" endpoint HTTP response body for the "InternalServerError" error.
type RefreshInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// NewIssueRequestBody builds the HTTP request body from the payload of the
// "issue" endpoint of the "token" service.
func NewIssueRequestBody(p *token.IssueInput) *IssueRequestBody {
	body := &IssueRequestBody{
		Username: p.Username,
		Password: p.Password,
	}
	return body
}

// NewRefreshRequestBody builds the HTTP request body from the payload of the
// "refresh" endpoint of the "token" service.
func NewRefreshRequestBody(p *token.RefreshInput) *RefreshRequestBody {
	body := &RefreshRequestBody{
		AccessToken:  p.AccessToken,
		RefreshToken: p.RefreshToken,
	}
	return body
}

// NewIssueTokenDetailOK builds a "token" service "issue" endpoint result from
// a HTTP "OK" response.
func NewIssueTokenDetailOK(body *IssueResponseBody) *token.TokenDetail {
	v := &token.TokenDetail{
		AccessToken:  *body.AccessToken,
		TokenType:    *body.TokenType,
		ExpiresIn:    *body.ExpiresIn,
		RefreshToken: *body.RefreshToken,
	}

	return v
}

// NewIssueUnauthorized builds a token service issue endpoint Unauthorized
// error.
func NewIssueUnauthorized(body *IssueUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewRefreshTokenDetailOK builds a "token" service "refresh" endpoint result
// from a HTTP "OK" response.
func NewRefreshTokenDetailOK(body *RefreshResponseBody) *token.TokenDetail {
	v := &token.TokenDetail{
		AccessToken:  *body.AccessToken,
		TokenType:    *body.TokenType,
		ExpiresIn:    *body.ExpiresIn,
		RefreshToken: *body.RefreshToken,
	}

	return v
}

// NewRefreshUnauthorized builds a token service refresh endpoint Unauthorized
// error.
func NewRefreshUnauthorized(body *RefreshUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewRefreshInternalServerError builds a token service refresh endpoint
// InternalServerError error.
func NewRefreshInternalServerError(body *RefreshInternalServerErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateIssueResponseBody runs the validations defined on IssueResponseBody
func ValidateIssueResponseBody(body *IssueResponseBody) (err error) {
	if body.AccessToken == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("access_token", "body"))
	}
	if body.TokenType == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("token_type", "body"))
	}
	if body.ExpiresIn == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("expires_in", "body"))
	}
	if body.RefreshToken == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("refresh_token", "body"))
	}
	return
}

// ValidateRefreshResponseBody runs the validations defined on
// RefreshResponseBody
func ValidateRefreshResponseBody(body *RefreshResponseBody) (err error) {
	if body.AccessToken == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("access_token", "body"))
	}
	if body.TokenType == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("token_type", "body"))
	}
	if body.ExpiresIn == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("expires_in", "body"))
	}
	if body.RefreshToken == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("refresh_token", "body"))
	}
	return
}

// ValidateIssueUnauthorizedResponseBody runs the validations defined on
// issue_Unauthorized_response_body
func ValidateIssueUnauthorizedResponseBody(body *IssueUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateRefreshUnauthorizedResponseBody runs the validations defined on
// refresh_Unauthorized_response_body
func ValidateRefreshUnauthorizedResponseBody(body *RefreshUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateRefreshInternalServerErrorResponseBody runs the validations defined
// on refresh_InternalServerError_response_body
func ValidateRefreshInternalServerErrorResponseBody(body *RefreshInternalServerErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}
