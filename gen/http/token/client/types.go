// Code generated by goa v3.22.2, DO NOT EDIT.
//
// token HTTP client types
//
// Command:
// $ goa gen github.com/neatflowcv/key-stone/design

package client

import (
	token "github.com/neatflowcv/key-stone/gen/token"
)

// IssueRequestBody is the type of the "token" service "issue" endpoint HTTP
// request body.
type IssueRequestBody struct {
	User *IssueInputRequestBody `form:"user,omitempty" json:"user,omitempty" xml:"user,omitempty"`
}

// RefreshRequestBody is the type of the "token" service "refresh" endpoint
// HTTP request body.
type RefreshRequestBody struct {
	Token *RefreshInputRequestBody `form:"token,omitempty" json:"token,omitempty" xml:"token,omitempty"`
}

// IssueResponseBody is the type of the "token" service "issue" endpoint HTTP
// response body.
type IssueResponseBody struct {
	// The access token of the user
	AccessToken *string `form:"access_token,omitempty" json:"access_token,omitempty" xml:"access_token,omitempty"`
	// The token type of the user
	TokenType *string `form:"token_type,omitempty" json:"token_type,omitempty" xml:"token_type,omitempty"`
	// The expires in of the user
	ExpiresIn *int `form:"expires_in,omitempty" json:"expires_in,omitempty" xml:"expires_in,omitempty"`
	// The refresh token of the user
	RefreshToken *string `form:"refresh_token,omitempty" json:"refresh_token,omitempty" xml:"refresh_token,omitempty"`
}

// RefreshResponseBody is the type of the "token" service "refresh" endpoint
// HTTP response body.
type RefreshResponseBody struct {
	// The access token of the user
	AccessToken *string `form:"access_token,omitempty" json:"access_token,omitempty" xml:"access_token,omitempty"`
	// The token type of the user
	TokenType *string `form:"token_type,omitempty" json:"token_type,omitempty" xml:"token_type,omitempty"`
	// The expires in of the user
	ExpiresIn *int `form:"expires_in,omitempty" json:"expires_in,omitempty" xml:"expires_in,omitempty"`
	// The refresh token of the user
	RefreshToken *string `form:"refresh_token,omitempty" json:"refresh_token,omitempty" xml:"refresh_token,omitempty"`
}

// IssueInputRequestBody is used to define fields on request body types.
type IssueInputRequestBody struct {
	// The username of the user
	Username string `form:"username" json:"username" xml:"username"`
	// The password of the user
	Password string `form:"password" json:"password" xml:"password"`
}

// RefreshInputRequestBody is used to define fields on request body types.
type RefreshInputRequestBody struct {
	// The access token of the user
	AccessToken string `form:"access_token" json:"access_token" xml:"access_token"`
	// The refresh token of the user
	RefreshToken string `form:"refresh_token" json:"refresh_token" xml:"refresh_token"`
}

// NewIssueRequestBody builds the HTTP request body from the payload of the
// "issue" endpoint of the "token" service.
func NewIssueRequestBody(p *token.IssuePayload) *IssueRequestBody {
	body := &IssueRequestBody{}
	if p.User != nil {
		body.User = marshalTokenIssueInputToIssueInputRequestBody(p.User)
	}
	return body
}

// NewRefreshRequestBody builds the HTTP request body from the payload of the
// "refresh" endpoint of the "token" service.
func NewRefreshRequestBody(p *token.RefreshPayload) *RefreshRequestBody {
	body := &RefreshRequestBody{}
	if p.Token != nil {
		body.Token = marshalTokenRefreshInputToRefreshInputRequestBody(p.Token)
	}
	return body
}

// NewIssueTokenDetailOK builds a "token" service "issue" endpoint result from
// a HTTP "OK" response.
func NewIssueTokenDetailOK(body *IssueResponseBody) *token.TokenDetail {
	v := &token.TokenDetail{
		AccessToken:  body.AccessToken,
		TokenType:    body.TokenType,
		ExpiresIn:    body.ExpiresIn,
		RefreshToken: body.RefreshToken,
	}

	return v
}

// NewIssueBadRequest builds a token service issue endpoint BadRequest error.
func NewIssueBadRequest(body string) token.BadRequest {
	v := token.BadRequest(body)

	return v
}

// NewIssueInternalServerError builds a token service issue endpoint
// InternalServerError error.
func NewIssueInternalServerError(body string) token.InternalServerError {
	v := token.InternalServerError(body)

	return v
}

// NewIssueUnauthorized builds a token service issue endpoint Unauthorized
// error.
func NewIssueUnauthorized(body string) token.Unauthorized {
	v := token.Unauthorized(body)

	return v
}

// NewRefreshTokenDetailOK builds a "token" service "refresh" endpoint result
// from a HTTP "OK" response.
func NewRefreshTokenDetailOK(body *RefreshResponseBody) *token.TokenDetail {
	v := &token.TokenDetail{
		AccessToken:  body.AccessToken,
		TokenType:    body.TokenType,
		ExpiresIn:    body.ExpiresIn,
		RefreshToken: body.RefreshToken,
	}

	return v
}

// NewRefreshBadRequest builds a token service refresh endpoint BadRequest
// error.
func NewRefreshBadRequest(body string) token.BadRequest {
	v := token.BadRequest(body)

	return v
}

// NewRefreshInternalServerError builds a token service refresh endpoint
// InternalServerError error.
func NewRefreshInternalServerError(body string) token.InternalServerError {
	v := token.InternalServerError(body)

	return v
}

// NewRefreshUnauthorized builds a token service refresh endpoint Unauthorized
// error.
func NewRefreshUnauthorized(body string) token.Unauthorized {
	v := token.Unauthorized(body)

	return v
}
